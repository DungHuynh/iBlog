require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ArticlesController do
  # include Devise::TestHelpers # Do not need since we use /spec/support/devise.rb
  render_views

  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  it "redirect to 404 when record not found" do
    get :show, :id => 69
    response.should redirect_to(error_404_url)
    flash[:error].should eq("The article you requested could not be found.")
  end

  describe "GET index" do
    it "assigns all available articles as @articles" do
      articles = []
      (1..2).each { articles << Article.make!({:state => 3}) }
      (1..2).each { articles << Article.make!({:state => 4}) }
      normal_article = Article.make!
      get :index
      assigns(:articles).should eq(articles)
    end
  end

  describe "GET featured" do
    it "assigns all featured articles as @articles" do
      articles = []
      (1..2).each { articles << Article.make!({:state => 4}) }
      Article.make!({:state => 3})
      normal_article = Article.make!
      get :featured
      assigns(:articles).should eq(articles)    end
  end

  describe "GET show" do
    it "assigns the requested article as @article" do
      article = Article.make! valid_attributes
      get :show, :id => article.id
      assigns(:article).should eq(article)
    end

    it "redirects to 404 page when requested acticle not found" do
      get :show, :id => 69
      response.should redirect_to(error_404_url)
    end
  end

  describe "GET new" do
    it "should not get new (anonymous)" do
      get :new
      response.should redirect_to(new_user_session_path)
    end

    it "assigns a new article as @article (signed in)" do
      sign_in User.make!
      get :new
      assigns(:article).should be_a_new(Article)
      response.should be_success
    end

    specify "new article has to belong to current user (signed in)" do
      user = User.make!
      sign_in user
      get :new
      assigns(:article).user == user
    end
  end

  describe "GET edit" do
    it "should not get edit (anonymous)" do
      get :edit, :id => Article.make!.to_param
      response.should redirect_to(new_user_session_url)
    end

    it "should not allow editing other's article (signed in)" do
      sign_in User.make!
      article = Article.make!
      get :edit, :id => article.id
      response.should redirect_to(error_404_url)
    end

    it "should allow editing own article (signed in)" do
      user = User.make!
      article = Article.make! :user => user
      sign_in user
      get :edit, :id => article.id
      response.should be_success
    end

    it "assigns the requested article as @article (signed in)" do
      user = User.make!
      article = Article.make! :user => user
      sign_in user
      get :edit, :id => article.id
      assigns(:article).should eq(article)
    end
  end

  describe "POST create" do
    it "should not create article (anonymous)" do
      expect {
        post :create, :article => Article.make.attributes
      }.to change(Article, :count).by(0)
      expect {
        post :create, :article => Article.make.attributes, :format => :json
      }.to change(Article, :count).by(0)
    end

    context "Signed in" do
      before :each do
        @user = User.make!
        sign_in User.make!
      end

      describe "with valid params" do
        it "creates a new Article" do
          expect {
            post :create, :article => Article.make.attributes
          }.to change(Article, :count).by(1)
        end

        it "assigns a newly created article as @article" do
          post :create, :article => Article.make.attributes
          assigns(:article).should be_a(Article)
          assigns(:article).should be_persisted
        end

        it "redirects to the created article" do
          post :create, :article => Article.make.attributes
          response.should redirect_to(Article.last)
        end
      end

      describe "with invalid params" do
        before(:all) do
          # Trigger the behavior that occurs when invalid params are submitted
          Article.any_instance.stub(:save).and_return(false)
        end
        it "assigns a newly created but unsaved article as @article" do
          post :create, :article => {}
          assigns(:article).should be_a_new(Article)
        end

        it "re-renders the 'new' template" do
          post :create, :article => {}
          response.should render_template("new")
        end
      end

      context "html" do
        describe "with valid params" do
          it "creates a new article" do
            expect {
              post :create, :article => Article.make.attributes
            }.to change(Article, :count).by(1)
          end

          it "assigns a newly created article as @article" do
            post :create, :article => Article.make.attributes
            assigns(:article).should be_a(Article)
            assigns(:article).should be_persisted
          end

          it "redirects to the created article" do
            post :create, :article => Article.make.attributes
            response.should redirect_to(Article.last)
          end
        end
      end

      context "json" do
        describe "with valid params" do
          it "creates a new Article" do
            expect {
              post :create, :article => Article.make.attributes, :format => :json
            }.to change(Article, :count).by(1)
          end

          it "should return all attributes" do
            def deep_compare(a,b)
              if a.is_a?(Hash)
                a.all? { |key, value| deep_compare(a[key], b[key.to_s]) }
              else
                b.should == a
              end
            end

            post :create, :article => Article.make.attributes, :format => :json
            expected_attrs = Article.last.to_json
            attrs = response.body
            deep_compare(expected_attrs, attrs)
          end
        end
      end
    end
  end

  describe "PUT update" do
    it "should not update article (anonymous)" do
      article = Article.make!
      article.should_not_receive(:update_attributes)
      put :update, :id => article.id, :article => {'these' => 'params'}
    end

    context "signed in" do
      before :each do
        @user = User.make!
        @article = Article.make!(:user => @user)
        sign_in @user
      end

      describe "with valid params" do

        it "doesn't update the requested article linked to other user" do
          others_article = Article.make!
          others_article.should_not_receive(:update_attributes)
          put :update, :id => others_article.id, :article => {'these' => 'params'}
          response.should redirect_to error_404_url
        end

        it "updates the requested article of signed user" do
          Article.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, :id => @article.id, :article => {'these' => 'params'}
        end

        it "assigns the requested article as @article" do
          put :update, :id => @article.id, :article => Article.make.attributes
          assigns(:article).should eq(@article)
        end

        it "redirects to the article" do
          put :update, :id => @article.id, :article => Article.make.attributes
          response.should redirect_to(@article)
        end
      end

      describe "with invalid params" do
        it "assigns the article as @article" do
          # Trigger the behavior that occurs when invalid params are submitted
          Article.any_instance.stub(:save).and_return(false)
          put :update, :id => @article.id, :article => {}
          assigns(:article).should eq(@article)
        end

        it "re-renders the 'edit' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Article.any_instance.stub(:save).and_return(false)
          put :update, :id => @article.id, :article => {}
          response.should render_template("edit")
        end
      end
    end
  end

  describe "DELETE destroy" do
    context "anonymous" do
      it "doesn't destroy the requested article (anonymous)" do
        article = Article.make!
        expect {
          delete :destroy, :id => article.id
        }.to change(Article, :count).by(0)
      end
    end

    context "signed in" do
      before :each do
        @user = User.make!
        @article = Article.make!(:user => @user)
        sign_in @user
      end

      it "destroys the requested article linked to signed user" do
        expect {
          delete :destroy, :id => @article.id
        }.to change(Article, :count).by(-1)
      end

      it "does not destroy the requested article linked to other user" do
        others_article = Article.make!
        expect {
          delete :destroy, :id => others_article.id
        }.to change(Article, :count).by(0)
      end

      it "redirects to 404 page when the article is linked to other user" do
        others_article = Article.make!
        delete :destroy, :id => others_article.id
        response.should redirect_to(error_404_url)
      end

      it "redirects to the articles list" do
        delete :destroy, :id => @article.id
        response.should redirect_to(articles_url)
      end
    end
  end
end
